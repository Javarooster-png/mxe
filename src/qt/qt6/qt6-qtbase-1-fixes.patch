This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tony Theodore <tonyt@logyst.com>
Date: Mon, 14 Dec 2020 15:09:00 +1100
Subject: [PATCH 1/4] optionally build docs


diff --git a/cmake/QtBaseHelpers.cmake b/cmake/QtBaseHelpers.cmake
index 1111111..2222222 100644
--- a/cmake/QtBaseHelpers.cmake
+++ b/cmake/QtBaseHelpers.cmake
@@ -205,7 +205,9 @@ macro(qt_internal_qtbase_build_repo)
         qt_internal_set_up_config_optimizations_like_in_qmake()
 
         ## Setup documentation
-        add_subdirectory(doc)
+        if(QT_BUILD_DOCS)
+            add_subdirectory(doc)
+        endif()
 
         ## Visit all the directories:
         add_subdirectory(src)

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Mon, 14 Feb 2022 00:44:19 +0100
Subject: [PATCH 2/4] help openssl detection


diff --git a/cmake/FindWrapOpenSSL.cmake b/cmake/FindWrapOpenSSL.cmake
index 1111111..2222222 100644
--- a/cmake/FindWrapOpenSSL.cmake
+++ b/cmake/FindWrapOpenSSL.cmake
@@ -21,7 +21,7 @@ if(TARGET OpenSSL::SSL)
         else()
             set(writableLib OpenSSL::Crypto)
         endif()
-        set_property(TARGET ${writableLib} APPEND PROPERTY INTERFACE_LINK_LIBRARIES ws2_32 crypt32)
+        set_property(TARGET ${writableLib} APPEND PROPERTY INTERFACE_LINK_LIBRARIES -lssl -lcrypto -lz -lws2_32 -lgdi32 -lcrypt32)
         unset(libType)
         unset(writableLib)
     endif()

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Edward Welbourne <edward.welbourne@qt.io>
Date: Thu, 10 Oct 2024 13:06:08 +0200
Subject: [PATCH 3/4] Pass string to ICU-wrapper as a QByteArray, not a QString
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The definition of QtTimeZoneLocale::ucalTimeZoneDisplayName() said it
takes a QByteArray but the header-file's declaration said it takes a
QString. That was never going to end well.

Fixes: QTBUG-129896
Change-Id: I5c15f88370f2d15efe2055ff73388c22fdc4ef46
Reviewed-by: MÃ¥rten Nordheim <marten.nordheim@qt.io>
(cherry picked from commit 01219276fdd3c1b6c867e97f6b8337f46ac82e28)
Reviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>

diff --git a/src/corelib/time/qtimezonelocale_p.h b/src/corelib/time/qtimezonelocale_p.h
index 1111111..2222222 100644
--- a/src/corelib/time/qtimezonelocale_p.h
+++ b/src/corelib/time/qtimezonelocale_p.h
@@ -32,7 +32,7 @@ namespace QtTimeZoneLocale {
 #if QT_CONFIG(icu)
 QString ucalTimeZoneDisplayName(UCalendar *ucal, QTimeZone::TimeType timeType,
                                 QTimeZone::NameType nameType,
-                                const QString &localeCode);
+                                const QByteArray &localeCode);
 #else
 // Define data types for QTZL_data_p.h
 
diff --git a/src/corelib/time/qtimezoneprivate_icu.cpp b/src/corelib/time/qtimezoneprivate_icu.cpp
index 1111111..2222222 100644
--- a/src/corelib/time/qtimezoneprivate_icu.cpp
+++ b/src/corelib/time/qtimezoneprivate_icu.cpp
@@ -149,7 +149,7 @@ static QTimeZonePrivate::Data ucalTimeZoneTransition(UCalendar *m_ucal,
     QTimeZone::TimeType timeType = dst == 0 ? QTimeZone::StandardTime : QTimeZone::DaylightTime;
     using namespace QtTimeZoneLocale;
     tran.abbreviation = ucalTimeZoneDisplayName(m_ucal, timeType,
-                                                QTimeZone::ShortName, QLocale().name());
+                                                QTimeZone::ShortName, QLocale().name().toUtf8());
     return tran;
 }
 #endif // U_ICU_VERSION_SHORT
@@ -258,7 +258,7 @@ QString QIcuTimeZonePrivate::displayName(QTimeZone::TimeType timeType,
     // Technically this may be suspect, if locale isn't QLocale(), since that's
     // what we used when constructing m_ucal; does ICU cope with inconsistency ?
     using namespace QtTimeZoneLocale;
-    return ucalTimeZoneDisplayName(m_ucal, timeType, nameType, locale.name());
+    return ucalTimeZoneDisplayName(m_ucal, timeType, nameType, locale.name().toUtf8());
 }
 
 int QIcuTimeZonePrivate::offsetFromUtc(qint64 atMSecsSinceEpoch) const

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Tue, 12 Nov 2024 16:13:57 +0100
Subject: [PATCH 4/4] Revert "QThread/Win: set the thread name on non-MSVC
 also"

The change was intended to let SetThreadDescription() be used in MINGW,
but for static builds it causes the runtime error:

    The procedure entry point SetThreadDescription could not be located
    in the dynamic link library
    <exec_path>

See https://stackoverflow.com/questions/62243162/how-to-access-setthreaddescription-in-windows-2016-server-version-1607.

This reverts commit 682d057aabd3efc9348d921d6864bae08ca1161a.

Change-Id: Ie3666018f7c7f553da1ad27df2420d8884098ffe

diff --git a/src/corelib/thread/qthread_win.cpp b/src/corelib/thread/qthread_win.cpp
index 1111111..2222222 100644
--- a/src/corelib/thread/qthread_win.cpp
+++ b/src/corelib/thread/qthread_win.cpp
@@ -18,17 +18,7 @@
 #  define _MT
 #endif // _MT
 #include <process.h>
-
-extern "C" {
-// MinGW is missing the declaration of SetThreadDescription:
-WINBASEAPI
-HRESULT
-WINAPI
-SetThreadDescription(
-    _In_ HANDLE hThread,
-    _In_ PCWSTR lpThreadDescription
-    );
-}
+#include <processthreadsapi.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -259,11 +249,13 @@ unsigned int __stdcall QT_ENSURE_STACK_ALIGNED_FOR_SSE QThreadPrivate::start(voi
     data->ensureEventDispatcher();
     data->eventDispatcher.loadRelaxed()->startingUp();
 
+#if defined(Q_CC_MSVC)
     // sets the name of the current thread.
     QString threadName = std::exchange(thr->d_func()->objectName, {});
     if (Q_LIKELY(threadName.isEmpty()))
         threadName = QString::fromUtf8(thr->metaObject()->className());
     SetThreadDescription(GetCurrentThread(), reinterpret_cast<const wchar_t *>(threadName.utf16()));
+#endif
 
     emit thr->started(QThread::QPrivateSignal());
     QThread::setTerminationEnabled(true);
